version: '3.8'

services:
  # Servicio de la base de datos PostgreSQL
  db:
    image: postgres:17 # Usa una imagen oficial de PostgreSQL (puedes elegir la versión)
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432" # Opcional: Expone el puerto de la DB al host (útil para pgAdmin)
    volumes:
      - db_data:/var/lib/postgresql/data # Persiste los datos de la DB
    restart: always # Reinicia el contenedor si falla

  # Servicio de tu bot de Telegram
  bot:
    build:
      context: . # Busca el Dockerfile en el directorio actual (raíz del proyecto)
      dockerfile: Dockerfile
    environment:
      # Pasa todas tus variables de entorno necesarias al contenedor del bot
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: db # ¡Importante! 'db' es el nombre del servicio de la DB en este mismo docker-compose.yml
      DB_PORT: ${DB_PORT}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      OPENWEATHER_API_KEY: ${OPENWEATHER_API_KEY}
      # ... otras APIs ...
    depends_on:
      - db # Asegura que el servicio 'db' se inicie antes que 'bot'
    # entrypoint: ["sh", "-c", "python main.py && sleep 10 && python main.py"] # Si necesitas una espera inicial para la DB
    # Nota: para la inicialización de la DB, a veces necesitas una espera.
    # Una mejor práctica es usar scripts de "wait-for-it" o un pequeño script Python que espere
    # a que la DB esté lista antes de iniciar el bot.
    # Por ahora, puedes omitir el entrypoint y manejar los errores de conexión en tu código Python.
    restart: always

# Volúmenes para persistir los datos de la base de datos
volumes:
  db_data: